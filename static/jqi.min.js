!function (s, o) {
  'use strict';
  var t = document.getElementsByTagName('script'),
  l = {
    version: '1.0.1',
    B: 1,
    W: - 1,
    E: 0,
    DEFAULT_LINE: 19,
    ERROR_REPORT: !0,
    DIR: (t[t.length - 1].src.split('?') [0].split('/').slice(0, - 1).join('/') + '/').split('src/') [0],
    lang: 'en',
    i18n: {
      en: {
      }
    }
  };
  l.opera = - 1 != navigator.userAgent.search(/(opera)(?:.*version)?[ \/]([\w.]+)/i),
  l.webkit = - 1 != navigator.userAgent.search(/(webkit)[ \/]([\w.]+)/i),
  l.msie = - 1 != navigator.userAgent.search(/(msie) ([\w.]+)/i),
  l.mozilla = - 1 != navigator.userAgent.search(/(mozilla)(?:.*? rv:([\w.]+))?/i) && !l.webkit && !l.msie,
  l.t = function (t) {
    var e = l.i18n[l.lang][t] || l.i18n.en[t];
    if (e) {
      for (var i = 1; i < arguments.length; i++) e = e.replace('$', arguments[i]);
      return e
    }
    return t
  },
  l.extendClass = function (t, e) {
    return e.prototype = Object.create(t.prototype),
    (e.prototype.constructor = e).prototype.super = t,
    e
  },
  l.abstractMethod = function () {
    throw Error('unimplemented abstract method')
  },
  l.clone = function (t) {
    if (t && 'object' == typeof t) {
      var e = t.constructor == Array ? [
      ] : {
      };
      for (var i in t) t[i] == t ? e[i] = t : e[i] = l.clone(t[i]);
      return e
    }
    return t
  },
  l.filterHTML = function (t) {
    return t && 'string' == typeof t ? t.replace(/</g, '&lt;').replace(/>/g, '&gt;')  : t
  };
  var c = function (t, e) {
    var i = e || {
    };
    for (var n in i) this[n] = i[n];
    for (var n in l.Board.default) this[n] === o && (this[n] = l.Board.default[n]); for (var n in c.themes.default) this.theme[n] === o && (this.theme[n] = c.themes.default[n]); this.tx = this.section.left, this.ty = this.section.top, this.bx = this.size - 1 - this.section.right, this.by = this.size - 1 - this.section.bottom, this.init(), t.appendChild(this.element), this.pixelRatio = s.devicePixelRatio || 1, this.width && this.height ? this.setDimensions(this.width, this.height)  : this.width ? this.setWidth(this.width)  : this.height && this.setHeight(this.height)
  }; c.themes = {
  }, c.themes.default = {
    shadowColor: 'rgba(62,32,32,0.5)',
    shadowTranColor: 'rgba(62,32,32,0)',
    shadowBlur: function (t) {
      return 0.1 * t.stoneRadius
    },
    shadowSize: 1,
    markupBlackColor: 'rgba(255,255,255,0.9)',
    markupWhiteColor: 'rgba(0,0,0,0.7)',
    markupNoneColor: 'rgba(0,0,0,0.7)',
    markupLineWidth: function (t) {
      return t.stoneRadius / 8
    },
    gridLineWidth: function (t) {
      return t.stoneRadius / 15
    },
    gridLineColor: '#654525',
    starColor: '#531',
    starSize: function (t) {
      return t.stoneRadius / 8 + 1
    },
    stoneSize: function (t) {
      return Math.min(t.fieldWidth, t.fieldHeight) / 2
    },
    coordColor: '#531',
    variationColor: 'rgba(0,32,128,0.8)',
    lastColor: 'rgba(255,0,0,0.8)',
    font: 'calibri',
    linesShift: 0.25
  };
  var d,
  u = function (t, e) {
    return 'function' == typeof e.theme[t] ? e.theme[t](e)  : e.theme[t]
  },
  e = {
    draw: function (t, e) {
      var i = e.getX(t.x),
      n = e.getY(t.y),
      s = e.stoneRadius;
      this.beginPath();
      var o = u('shadowBlur', e),
      r = Math.max(0, s - 0.5),
      a = this.createRadialGradient(i - e.ls, n - e.ls, r - 1 - o, i - e.ls, n - e.ls, r + o);
      a.addColorStop(0, u('shadowColor', e)),
      a.addColorStop(1, u('shadowTranColor', e)),
      this.fillStyle = a,
      this.arc(i - e.ls, n - e.ls, r + o, 0, 2 * Math.PI, !0),
      this.fill()
    },
    clear: function (t, e) {
      var i = e.getX(t.x),
      n = e.getY(t.y),
      s = e.stoneRadius;
      this.clearRect(i - 1.1 * s - e.ls, n - 1.1 * s - e.ls, 2.2 * s, 2.2 * s)
    }
  },
  r = function (t, e, i, n, s, o, r, a) {
    t.strokeStyle = 'rgba(64,64,64,0.2)',
    t.lineWidth = n / 30 * a,
    t.beginPath();
    var h,
    l,
    c,
    d,
    u = e + (n -= Math.max(1, t.lineWidth)) * Math.cos(s * Math.PI),
    p = i + n * Math.sin(s * Math.PI),
    f = e + n * Math.cos(o * Math.PI),
    m = i + n * Math.sin(o * Math.PI);
    u < f ? (h = (m - p) / (f - u), l = Math.atan(h))  : f == u ? l = Math.PI / 2 : (h = (m - p) / (f - u), l = Math.atan(h) - Math.PI);
    var y = r * n,
    v = u + (c = Math.sin(l) * y),
    g = p - (d = Math.cos(l) * y),
    b = f + c,
    x = m - d;
    t.moveTo(u, p),
    t.bezierCurveTo(v, g, b, x, f, m),
    t.stroke()
  },
  p = function (t) {
    for (var e = t.angle, i = t.angle, n = 0; n < t.lines.length; n++) e += t.lines[n],
    i -= t.lines[n],
    r(t.ctx, t.x, t.y, t.radius, e, i, t.factor, t.thickness)
  },
  h = function (t, e, i) {
    return t.obj_arr[e][i][0].c == l.B ? u('markupBlackColor', t)  : t.obj_arr[e][i][0].c == l.W ? u('markupWhiteColor', t)  : u('markupNoneColor', t)
  },
  a = function (t, e, i) {
    return t.obj_arr[e][i][0] && (t.obj_arr[e][i][0].c == l.W || t.obj_arr[e][i][0].c == l.B)
  },
  i = function (t, e, i) {
    if (!a(i, e.x, e.y) && !e._nodraw) {
      var n = i.getX(e.x),
      s = i.getY(e.y),
      o = i.stoneRadius;
      t.clearRect(n - o, s - o, 2 * o, 2 * o)
    }
  },
  n = function (t, e) {
    a(e, t.x, t.y) || (t._nodraw = !0, m(e, 'grid'), delete t._nodraw)
  },
  f = function (t, e, i) {
    var n = i.getX(e.x),
    s = i.getY(e.y),
    o = i.stoneRadius,
    r = e.font || u('font', i) || '';
    t.fillStyle = e.c || h(i, e.x, e.y),
    1 == e.text.length ? t.font = Math.round(1.3 * o) + 'px ' + r : 2 == e.text.length ? t.font = Math.round(1.1 * o) + 'px ' + r : 3 == e.text.length ? t.font = Math.round(0.9 * o) + 'px ' + r : t.font = Math.round(o) + 'px ' + r,
    t.beginPath(),
    t.textBaseline = 'middle',
    t.textAlign = 'center',
    t.fillText(e.text, n, s, 2 * o)
  },
  m = function (t, e) {
    var i;
    t[e].clear(),
    t[e].draw(t);
    for (var n = 0; n < t.size; n++) for (var s = 0; s < t.size; s++) for (var o = 0; o < t.obj_arr[n][s].length; o++) {
      var r = t.obj_arr[n][s][o];
      (i = r.type ? 'string' == typeof r.type ? c.drawHandlers[r.type] : r.type : t.stoneHandler) [e] && i[e].draw.call(t[e].getContext(r), r, t)
    }
    for (var a = 0; a < t.obj_list.length; a++) {
      var h = t.obj_list[a];
      h.handler[e] && h.handler[e].draw.call(t[e].getContext(h.args), h.args, t)
    }
  };
  c.drawHandlers = {
    NORMAL: {
      stone: {
        draw: function (t, e) {
          var i,
          n = e.getX(t.x),
          s = e.getY(t.y),
          o = e.stoneRadius;
          t.c == l.W ? ((i = this.createRadialGradient(n - 2 * o / 5, s - 2 * o / 5, o / 3, n - o / 5, s - o / 5, 5 * o / 5)).addColorStop(0, '#fff'), i.addColorStop(1, '#aaa'))  : ((i = this.createRadialGradient(n - 2 * o / 5, s - 2 * o / 5, 1, n - o / 5, s - o / 5, 4 * o / 5)).addColorStop(0, '#666'), i.addColorStop(1, '#000')),
          this.beginPath(),
          this.fillStyle = i,
          this.arc(n - e.ls, s - e.ls, Math.max(0, o - 0.5), 0, 2 * Math.PI, !0),
          this.fill()
        }
      },
      shadow: e
    },
    PAINTED: {
      stone: {
        draw: function (t, e) {
          var i,
          n = e.getX(t.x),
          s = e.getY(t.y),
          o = e.stoneRadius;
          t.c == l.W ? ((i = this.createRadialGradient(n - 2 * o / 5, s - 2 * o / 5, 2, n - o / 5, s - o / 5, 4 * o / 5)).addColorStop(0, '#fff'), i.addColorStop(1, '#ddd'))  : ((i = this.createRadialGradient(n - 2 * o / 5, s - 2 * o / 5, 1, n - o / 5, s - o / 5, 4 * o / 5)).addColorStop(0, '#111'), i.addColorStop(1, '#000')),
          this.beginPath(),
          this.fillStyle = i,
          this.arc(n - e.ls, s - e.ls, Math.max(0, o - 0.5), 0, 2 * Math.PI, !0),
          this.fill(),
          this.beginPath(),
          this.lineWidth = o / 6,
          t.c == l.W ? (this.strokeStyle = '#999', this.arc(n + o / 8, s + o / 8, o / 2, 0, Math.PI / 2, !1))  : (this.strokeStyle = '#ccc', this.arc(n - o / 8, s - o / 8, o / 2, Math.PI, 1.5 * Math.PI)),
          this.stroke()
        }
      },
      shadow: e
    },
    GLOW: {
      stone: {
        draw: function (t, e) {
          var i,
          n = e.getX(t.x),
          s = e.getY(t.y),
          o = e.stoneRadius;
          t.c == l.W ? ((i = this.createRadialGradient(n - 2 * o / 5, s - 2 * o / 5, o / 3, n - o / 5, s - o / 5, 8 * o / 5)).addColorStop(0, '#fff'), i.addColorStop(1, '#666'))  : ((i = this.createRadialGradient(n - 2 * o / 5, s - 2 * o / 5, 1, n - o / 5, s - o / 5, 3 * o / 5)).addColorStop(0, '#555'), i.addColorStop(1, '#000')),
          this.beginPath(),
          this.fillStyle = i,
          this.arc(n - e.ls, s - e.ls, Math.max(0, o - 0.5), 0, 2 * Math.PI, !0),
          this.fill()
        }
      },
      shadow: e
    },
    SHELL: {
      stone: {
        draw: function (t, e) {
          var i,
          n,
          s,
          o = e.stoneRadius;
          if (d = d || Math.ceil(9999999 * Math.random()), i = e.getX(t.x), n = e.getY(t.y), s = t.c == l.W ? '#aaa' : '#000', this.beginPath(), this.fillStyle = s, this.arc(i - e.ls, n - e.ls, Math.max(0, o - 0.5), 0, 2 * Math.PI, !0), this.fill(), t.c == l.W) {
            var r = d % (3 + t.x * e.size + t.y) % 3,
            a = e.size * e.size + t.x * e.size + t.y,
            h = 2 / a * (d % a);
            p(0 == r ? {
              ctx: this,
              x: i,
              y: n,
              radius: o,
              angle: h,
              lines: [
                0.1,
                0.12,
                0.11,
                0.1,
                0.09,
                0.09,
                0.09,
                0.09
              ],
              factor: 0.25,
              thickness: 1.75
            }
             : 1 == r ? {
              ctx: this,
              x: i,
              y: n,
              radius: o,
              angle: h,
              lines: [
                0.1,
                0.09,
                0.08,
                0.07,
                0.06,
                0.06,
                0.06,
                0.06,
                0.06,
                0.06,
                0.06
              ],
              factor: 0.2,
              thickness: 1.5
            }
             : {
              ctx: this,
              x: i,
              y: n,
              radius: o,
              angle: h,
              lines: [
                0.12,
                0.14,
                0.13,
                0.12,
                0.12,
                0.12
              ],
              factor: 0.3,
              thickness: 2
            }),
            (s = this.createRadialGradient(i - 2 * o / 5, n - 2 * o / 5, o / 3, i - o / 5, n - o / 5, 5 * o / 5)).addColorStop(0, 'rgba(255,255,255,0.9)'),
            s.addColorStop(1, 'rgba(255,255,255,0)'),
            this.beginPath(),
            this.fillStyle = s,
            this.arc(i - e.ls, n - e.ls, Math.max(0, o - 0.5), 0, 2 * Math.PI, !0),
            this.fill()
          } else (s = this.createRadialGradient(i + 0.4 * o, n + 0.4 * o, 0, i + 0.5 * o, n + 0.5 * o, o)).addColorStop(0, 'rgba(32,32,32,1)'),
          s.addColorStop(1, 'rgba(0,0,0,0)'),
          this.beginPath(),
          this.fillStyle = s,
          this.arc(i - e.ls, n - e.ls, Math.max(0, o - 0.5), 0, 2 * Math.PI, !0),
          this.fill(),
          (s = this.createRadialGradient(i - 0.4 * o, n - 0.4 * o, 1, i - 0.5 * o, n - 0.5 * o, 1.5 * o)).addColorStop(0, 'rgba(64,64,64,1)'),
          s.addColorStop(1, 'rgba(0,0,0,0)'),
          this.beginPath(),
          this.fillStyle = s,
          this.arc(i - e.ls, n - e.ls, Math.max(0, o - 0.5), 0, 2 * Math.PI, !0),
          this.fill()
        }
      },
      shadow: e
    },
    MONO: {
      stone: {
        draw: function (t, e) {
          var i = e.getX(t.x),
          n = e.getY(t.y),
          s = e.stoneRadius,
          o = u('markupLineWidth', e) || 1;
          t.c == l.W ? this.fillStyle = 'white' : this.fillStyle = 'black',
          this.beginPath(),
          this.arc(i, n, Math.max(0, s - o), 0, 2 * Math.PI, !0),
          this.fill(),
          this.lineWidth = o,
          this.strokeStyle = 'black',
          this.stroke()
        }
      }
    },
    CR: {
      stone: {
        draw: function (t, e) {
          var i,
          n,
          s,
          o,
          r,
          a;
          i = this,
          n = t,
          o = (s = e).getX(n.x),
          r = s.getY(n.y),
          a = s.stoneRadius,
          i.strokeStyle = n.c || h(s, n.x, n.y),
          i.lineWidth = n.lineWidth || u('markupLineWidth', s) || 1,
          i.beginPath(),
          i.arc(o - s.ls, r - s.ls, a / 2, 0, 2 * Math.PI, !0),
          i.stroke()
        }
      },
      grid: {
        draw: function (t, e) {
          i(this, t, e)
        },
        clear: function (t, e) {
          n(t, e)
        }
      }
    },
    LB: {
      stone: {
        draw: function (t, e) {
          f(this, t, e)
        }
      },
      grid: {
        draw: function (t, e) {
          i(this, t, e)
        },
        clear: function (t, e) {
          n(t, e)
        }
      }
    },
    TR: {
      stone: {
        draw: function (t, e) {
          var i,
          n,
          s,
          o,
          r,
          a;
          i = this,
          n = t,
          o = (s = e).getX(n.x),
          r = s.getY(n.y),
          a = s.stoneRadius,
          i.strokeStyle = n.c || h(s, n.x, n.y),
          i.lineWidth = n.lineWidth || u('markupLineWidth', s) || 1,
          i.beginPath(),
          i.moveTo(o - s.ls, r - s.ls - Math.round(a / 2)),
          i.lineTo(Math.round(o - a / 2) - s.ls, Math.round(r + a / 3) + s.ls),
          i.lineTo(Math.round(o + a / 2) + s.ls, Math.round(r + a / 3) + s.ls),
          i.closePath(),
          i.stroke()
        }
      },
      grid: {
        draw: function (t, e) {
          i(this, t, e)
        },
        clear: function (t, e) {
          n(t, e)
        }
      }
    },
    MA: {
      stone: {
        draw: function (t, e) {
          var i,
          n,
          s,
          o,
          r,
          a;
          i = this,
          n = t,
          o = (s = e).getX(n.x),
          r = s.getY(n.y),
          a = s.stoneRadius,
          i.strokeStyle = n.c || h(s, n.x, n.y),
          i.lineCap = 'round',
          i.lineWidth = 2 * (n.lineWidth || u('markupLineWidth', s) || 1) - 1,
          i.beginPath(),
          i.moveTo(Math.round(o - a / 2), Math.round(r - a / 2)),
          i.lineTo(Math.round(o + a / 2), Math.round(r + a / 2)),
          i.moveTo(Math.round(o + a / 2) - 1, Math.round(r - a / 2)),
          i.lineTo(Math.round(o - a / 2) - 1, Math.round(r + a / 2)),
          i.stroke(),
          i.lineCap = 'butt'
        }
      },
      grid: {
        draw: function (t, e) {
          i(this, t, e)
        },
        clear: function (t, e) {
          n(t, e)
        }
      }
    },
    SL: {
      stone: {
        draw: function (t, e) {
          var i,
          n,
          s,
          o,
          r,
          a;
          i = this,
          n = t,
          o = (s = e).getX(n.x),
          r = s.getY(n.y),
          a = s.stoneRadius,
          i.fillStyle = n.c || h(s, n.x, n.y),
          i.beginPath(),
          i.rect(o - a / 2, r - a / 2, a, a),
          i.fill()
        }
      },
      grid: {
        draw: function (t, e) {
          i(this, t, e)
        },
        clear: function (t, e) {
          n(t, e)
        }
      }
    },
    SM: {
      stone: {
        draw: function (t, e) {
          var i,
          n,
          s,
          o,
          r,
          a;
          i = this,
          n = t,
          o = (s = e).getX(n.x),
          r = s.getY(n.y),
          a = s.stoneRadius,
          i.strokeStyle = n.c || h(s, n.x, n.y),
          i.lineWidth = 2 * (n.lineWidth || u('markupLineWidth', s) || 1),
          i.beginPath(),
          i.arc(o - a / 3, r - a / 3, a / 6, 0, 2 * Math.PI, !0),
          i.stroke(),
          i.beginPath(),
          i.arc(o + a / 3, r - a / 3, a / 6, 0, 2 * Math.PI, !0),
          i.stroke(),
          i.beginPath(),
          i.moveTo(o - a / 1.5, r),
          i.bezierCurveTo(o - a / 1.5, r + a / 2, o + a / 1.5, r + a / 2, o + a / 1.5, r),
          i.stroke()
        }
      },
      grid: {
        draw: function (t, e) {
          i(this, t, e)
        },
        clear: function (t, e) {
          n(t, e)
        }
      }
    },
    SN: {
      stone: {
        draw: function (t, e) {
          f(this, t, e)
        }
      }
    },
    SQ: {
      stone: {
        draw: function (t, e) {
          var i,
          n,
          s,
          o,
          r,
          a;
          i = this,
          n = t,
          o = (s = e).getX(n.x),
          r = s.getY(n.y),
          a = Math.round(s.stoneRadius),
          i.strokeStyle = n.c || h(s, n.x, n.y),
          i.lineWidth = n.lineWidth || u('markupLineWidth', s) || 1,
          i.beginPath(),
          i.rect(Math.round(o - a / 2) - s.ls, Math.round(r - a / 2) - s.ls, a, a),
          i.stroke()
        }
      },
      grid: {
        draw: function (t, e) {
          i(this, t, e)
        },
        clear: function (t, e) {
          n(t, e)
        }
      }
    }
  },
  c.coord = {
    grid: {
      draw: function (t, e) {
        var i,
        n,
        s,
        o,
        r,
        a,
        h = u('font', e) || '';
        this.fillStyle = u('coordColor', e),
        this.textBaseline = 'middle',
        this.textAlign = 'center',
        this.font = Math.round(e.stoneRadius) + 'px ' + h,
        s = e.getX( - 0.75),
        o = e.getX(e.size - 0.25),
        r = e.getY( - 0.75),
        a = e.getY(e.size - 0.25);
        for (var l = 0; l < e.size; l++) (i = l + 'A'.charCodeAt(0)) >= 'I'.charCodeAt(0) && i++,
        n = e.getY(l),
        this.fillText(e.size - l, s, n),
        this.fillText(e.size - l, o, n),
        n = e.getX(l),
        this.fillText(String.fromCharCode(i), n, r),
        this.fillText(String.fromCharCode(i), n, a);
        this.fillStyle = 'black'
      }
    }
  },
  c.CanvasLayer = function () {
    this.element = document.createElement('canvas'),
    this.context = this.element.getContext('2d'),
    this.pixelRatio = s.devicePixelRatio || 1,
    1 < this.pixelRatio && this.context.scale(this.pixelRatio, this.pixelRatio)
  },
  c.CanvasLayer.prototype = {
    constructor: c.CanvasLayer,
    setDimensions: function (t, e) {
      this.element.width = t,
      this.element.style.width = t / this.pixelRatio + 'px',
      this.element.height = e,
      this.element.style.height = e / this.pixelRatio + 'px'
    },
    appendTo: function (t, e) {
      this.element.style.position = 'absolute',
      this.element.style.zIndex = e,
      t.appendChild(this.element)
    },
    removeFrom: function (t) {
      t.removeChild(this.element)
    },
    getContext: function () {
      return this.context
    },
    draw: function (t) {
    },
    clear: function () {
      this.context.clearRect(0, 0, this.element.width, this.element.height)
    }
  },
  c.GridLayer = l.extendClass(c.CanvasLayer, function () {
    this.super .call(this)
  }),
  c.GridLayer.prototype.draw = function (t) {
    this.context.beginPath(),
    this.context.lineWidth = u('gridLineWidth', t),
    this.context.strokeStyle = u('gridLineColor', t);
    var e,
    i = Math.round(t.left),
    n = Math.round(t.top),
    s = Math.round(t.fieldWidth * (t.size - 1)),
    o = Math.round(t.fieldHeight * (t.size - 1));
    this.context.strokeRect(i - t.ls, n - t.ls, s, o),
    this.context.strokeRect(i - t.ls + 1, n - t.ls + 1, s - 2, o - 2);
    for (var r = 1; r < t.size - 1; r++) e = Math.round(t.getX(r)) - t.ls,
    this.context.moveTo(e, n),
    this.context.lineTo(e, n + o),
    e = Math.round(t.getY(r)) - t.ls,
    this.context.moveTo(i, e),
    this.context.lineTo(i + s, e);
    if (this.context.stroke(), this.context.fillStyle = u('starColor', t), t.drawStar && t.starPoints[t.size]) for (var a in t.starPoints[t.size]) this.context.beginPath(),
    this.context.arc(t.getX(t.starPoints[t.size][a].x) - t.ls, t.getY(t.starPoints[t.size][a].y) - t.ls, u('starSize', t), 0, 2 * Math.PI, !0),
    this.context.fill()
  },
  c.MultipleCanvasLayer = l.extendClass(c.CanvasLayer, function () {
    this.init(4)
  }),
  c.MultipleCanvasLayer.prototype.init = function (t) {
    var e,
    i;
    this.layers = t,
    this.elements = [
    ],
    this.contexts = [
    ],
    this.pixelRatio = s.devicePixelRatio || 1;
    for (var n = 0; n < t; n++) i = (e = document.createElement('canvas')).getContext('2d'),
    1 < this.pixelRatio && i.scale(this.pixelRatio, this.pixelRatio),
    this.elements.push(e),
    this.contexts.push(i)
  },
  c.MultipleCanvasLayer.prototype.appendTo = function (t, e) {
    for (var i = 0; i < this.layers; i++) this.elements[i].style.position = 'absolute',
    this.elements[i].style.zIndex = e,
    t.appendChild(this.elements[i])
  },
  c.MultipleCanvasLayer.prototype.removeFrom = function (t) {
    for (var e = 0; e < this.layers; e++) t.removeChild(this.elements[e])
  },
  c.MultipleCanvasLayer.prototype.getContext = function (t) {
    return t.x % 2 ? t.y % 2 ? this.contexts[0] : this.contexts[1] : t.y % 2 ? this.contexts[2] : this.contexts[3]
  },
  c.MultipleCanvasLayer.prototype.clear = function (t, e) {
    for (var i = 0; i < this.layers; i++) this.contexts[i].clearRect(0, 0, this.elements[i].width, this.elements[i].height)
  },
  c.MultipleCanvasLayer.prototype.setDimensions = function (t, e) {
    for (var i = 0; i < this.layers; i++) this.elements[i].width = t,
    this.elements[i].style.width = t / this.pixelRatio + 'px',
    this.elements[i].height = e,
    this.elements[i].style.height = e / this.pixelRatio + 'px'
  },
  c.ShadowLayer = l.extendClass(c.MultipleCanvasLayer, function (t, e, i) {
    this.init(2),
    this.shadowSize = e === o ? 1 : e,
    this.board = t
  }),
  c.ShadowLayer.prototype.getContext = function (t) {
    return !(t.x % 2 && t.y % 2) && (t.x % 2 || t.y % 2) ? this.contexts[1] : this.contexts[0]
  },
  c.ShadowLayer.prototype.setDimensions = function (t, e) {
    this.super .prototype.setDimensions.call(this, t, e);
    for (var i = 0; i < this.layers; i++) this.contexts[i].setTransform(1, 0, 0, 1, Math.round(this.shadowSize * this.board.stoneRadius / 7), Math.round(this.shadowSize * this.board.stoneRadius / 7))
  };
  var y = function (t, e) {
    var i = e.getX(t.x),
    n = e.getY(t.y),
    s = e.stoneRadius;
    this.clearRect(i - 2 * s - e.ls, n - 2 * s - e.ls, 4 * s, 4 * s)
  },
  v = function () {
    return 3 * this.width / (4 * (this.bx + 1 - this.tx) + 2) - this.fieldWidth * this.tx
  },
  g = function () {
    return 3 * this.height / (4 * (this.by + 1 - this.ty) + 2) - this.fieldHeight * this.ty
  },
  b = function () {
    return 4 * this.width / (4 * (this.bx + 1 - this.tx) + 2)
  },
  x = function () {
    return 4 * this.height / (4 * (this.by + 1 - this.ty) + 2)
  },
  w = function (t, e) {
    for (var i, n = 0; n < this.obj_arr[t][e].length; n++) {
      var s = this.obj_arr[t][e][n];
      for (var o in i = s.type ? 'string' == typeof s.type ? c.drawHandlers[s.type] : s.type : this.stoneHandler) i[o].clear ? i[o].clear.call(this[o].getContext(s), s, this)  : y.call(this[o].getContext(s), s, this)
    }
  },
  C = function (t, e) {
    for (var i, n = 0; n < this.obj_arr[t][e].length; n++) {
      var s = this.obj_arr[t][e][n];
      for (var o in i = s.type ? 'string' == typeof s.type ? c.drawHandlers[s.type] : s.type : this.stoneHandler) i[o].draw.call(this[o].getContext(s), s, this)
    }
  },
  k = function () {
    this.element.style.width = this.width / this.pixelRatio + 'px',
    this.element.style.height = this.height / this.pixelRatio + 'px',
    this.stoneRadius = u('stoneSize', this),
    this.ls = u('linesShift', this);
    for (var t = 0; t < this.layers.length; t++) this.layers[t].setDimensions(this.width, this.height)
  };
  c.prototype = {
    constructor: c,
    init: function () {
      this.obj_arr = [
      ];
      for (var t = 0; t < this.size; t++) {
        this.obj_arr[t] = [
        ];
        for (var e = 0; e < this.size; e++) this.obj_arr[t][e] = [
        ]
      }
      this.obj_list = [
      ],
      this.layers = [
      ],
      this.listeners = [
      ],
      this.element = document.createElement('div'),
      this.element.className = 'jqi-board',
      this.element.style.position = 'relative',
      this.background && ('#' == this.background[0] ? this.element.style.backgroundColor = this.background : (this.element.style.backgroundImage = 'url(\'' + this.background + '\')', this.stoneHandler == c.drawHandlers.REALISTIC && (this.element.style.backgroundSize = '100%'))),
      this.showCoord && this.drawCoord(),
      this.grid = new c.GridLayer,
      this.shadow = new c.ShadowLayer(this, u('shadowSize', this)),
      this.stone = new c.MultipleCanvasLayer,
      this.addLayer(this.grid, 100),
      this.addLayer(this.shadow, 200),
      this.addLayer(this.stone, 300)
    },
    setWidth: function (t) {
      this.width = t,
      this.width *= this.pixelRatio,
      this.fieldHeight = this.fieldWidth = b.call(this),
      this.left = v.call(this),
      this.height = (this.by - this.ty + 1.5) * this.fieldHeight,
      this.top = g.call(this),
      k.call(this),
      this.redraw()
    },
    setHeight: function (t) {
      this.height = t,
      this.height *= this.pixelRatio,
      this.fieldWidth = this.fieldHeight = x.call(this),
      this.top = g.call(this),
      this.width = (this.bx - this.tx + 1.5) * this.fieldWidth,
      this.left = v.call(this),
      k.call(this),
      this.redraw()
    },
    setDimensions: function (t, e) {
      this.width = t || parseInt(this.element.style.width, 10),
      this.width *= this.pixelRatio,
      this.height = e || parseInt(this.element.style.height, 10),
      this.height *= this.pixelRatio,
      this.fieldWidth = b.call(this),
      this.fieldHeight = x.call(this),
      this.left = v.call(this),
      this.top = g.call(this),
      k.call(this),
      this.redraw()
    },
    getSection: function () {
      return this.section
    },
    setSection: function (t, e, i, n) {
      this.section = 'object' == typeof t ? t : {
        top: t,
        right: e,
        bottom: i,
        left: n
      },
      this.tx = this.section.left,
      this.ty = this.section.top,
      this.bx = this.size - 1 - this.section.right,
      this.by = this.size - 1 - this.section.bottom,
      this.setDimensions()
    },
    setSize: function (t) {
      var e = t || l.DEFAULT_LINE;
      if (e != this.size) {
        this.size = e,
        this.obj_arr = [
        ];
        for (var i = 0; i < this.size; i++) {
          this.obj_arr[i] = [
          ];
          for (var n = 0; n < this.size; n++) this.obj_arr[i][n] = [
          ]
        }
        this.bx = this.size - 1 - this.section.right,
        this.by = this.size - 1 - this.section.bottom,
        this.setDimensions()
      }
    },
    redraw: function () {
      try {
        for (var t = 0; t < this.layers.length; t++) this.layers[t].clear(this),
        this.layers[t].draw(this);
        for (var e = 0; e < this.size; e++) for (var i = 0; i < this.size; i++) C.call(this, e, i);
        for (var n = 0; n < this.obj_list.length; n++) {
          var s = this.obj_list[n],
          o = s.handler;
          for (var r in o) o[r].draw.call(this[r].getContext(s.args), s.args, this)
        }
      } catch (t) {
      }
    },
    getX: function (t) {
      return this.left + t * this.fieldWidth
    },
    getY: function (t) {
      return this.top + t * this.fieldHeight
    },
    addLayer: function (t, e) {
      t.appendTo(this.element, e),
      t.setDimensions(this.width, this.height),
      this.layers.push(t)
    },
    removeLayer: function (t) {
      var e = this.layers.indexOf(t);
      0 <= e && (this.layers.splice(e, 1), t.removeFrom(this.element))
    },
    update: function (t) {
      var e;
      if (t.remove && 'all' == t.remove) this.removeAllObjects();
       else if (t.remove) for (e = 0; e < t.remove.length; e++) this.removeObject(t.remove[e]);
      if (t.add) for (e = 0; e < t.add.length; e++) this.addObject(t.add[e])
    },
    addObject: function (t) {
      if (t.constructor != Array) try {
        w.call(this, t.x, t.y);
        for (var e = this.obj_arr[t.x][t.y], i = 0; i < e.length; i++) if (e[i].type == t.type) return e[i] = t,
        void C.call(this, t.x, t.y);
        t.type ? e.push(t)  : e.unshift(t),
        C.call(this, t.x, t.y)
      } catch (t) {
      } else for (var n = 0; n < t.length; n++) this.addObject(t[n])
    },
    removeObject: function (t) {
      if (t.constructor != Array) try {
        for (var e, i = 0; i < this.obj_arr[t.x][t.y].length; i++) if (this.obj_arr[t.x][t.y][i].type == t.type) {
          e = i;
          break
        }
        if (e === o) return;
        w.call(this, t.x, t.y),
        this.obj_arr[t.x][t.y].splice(e, 1),
        C.call(this, t.x, t.y)
      } catch (t) {
      } else for (var n = 0; n < t.length; n++) this.removeObject(t[n])
    },
    removeObjectsAt: function (t, e) {
      this.obj_arr[t][e].length && (w.call(this, t, e), this.obj_arr[t][e] = [
      ])
    },
    removeAllObjects: function () {
      this.obj_arr = [
      ];
      for (var t = 0; t < this.size; t++) {
        this.obj_arr[t] = [
        ];
        for (var e = 0; e < this.size; e++) this.obj_arr[t][e] = [
        ]
      }
      this.redraw()
    },
    addCustomObject: function (t, e) {
      this.obj_list.push({
        handler: t,
        args: e
      }),
      this.redraw()
    },
    removeCustomObject: function (t, e) {
      for (var i = 0; i < this.obj_list.length; i++) {
        var n = this.obj_list[i];
        if (n.handler == t && n.args == e) return this.obj_list.splice(i, 1),
        this.redraw(),
        !0
      }
      return !1
    },
    addEventListener: function (t, i) {
      var n = this,
      e = {
        type: t,
        callback: i,
        handleEvent: function (t) {
          var e = function (t) {
            var e,
            i;
            return e = t.offsetX * this.pixelRatio,
            e -= this.left,
            e /= this.fieldWidth,
            e = Math.round(e),
            i = t.offsetY * this.pixelRatio,
            i -= this.top,
            i /= this.fieldHeight,
            i = Math.round(i),
            {
              x: e >= this.size ? - 1 : e,
              y: i >= this.size ? - 1 : i
            }
          }.call(n, t);
          i(e.x, e.y, t)
        }
      };
      this.element.addEventListener(t, e, !0),
      this.listeners.push(e)
    },
    removeEventListener: function (t, e) {
      for (var i = 0; i < this.listeners.length; i++) {
        var n = this.listeners[i];
        if (n.type == t && n.callback == e) return this.element.removeEventListener(n.type, n, !0),
        this.listeners.splice(i, 1),
        !0
      }
      return !1
    },
    getState: function () {
      return {
        objects: l.clone(this.obj_arr),
        custom: l.clone(this.obj_list)
      }
    },
    restoreState: function (t) {
      this.obj_arr = t.objects || this.obj_arr,
      this.obj_list = t.custom || this.obj_list,
      this.redraw()
    },
    drawCoord: function () {
      this.setSection( - 0.5, - 0.5, - 0.5, - 0.5),
      this.addCustomObject(c.coord)
    }
  },
  c.default = {
    size: l.DEFAULT_LINE,
    width: 0,
    height: 0,
    showCoord: !1,
    starPoints: {
      5: [
        {
          x: 2,
          y: 2
        }
      ],
      6: [
        {
          x: 2,
          y: 2
        }
      ],
      7: [
        {
          x: 2,
          y: 2
        }
      ],
      8: [
        {
          x: 2,
          y: 2
        },
        {
          x: 5,
          y: 2
        },
        {
          x: 2,
          y: 5
        },
        {
          x: 5,
          y: 5
        }
      ],
      9: [
        {
          x: 2,
          y: 2
        },
        {
          x: 6,
          y: 2
        },
        {
          x: 4,
          y: 4
        },
        {
          x: 2,
          y: 6
        },
        {
          x: 6,
          y: 6
        }
      ],
      10: [
        {
          x: 2,
          y: 2
        },
        {
          x: 7,
          y: 2
        },
        {
          x: 2,
          y: 7
        },
        {
          x: 7,
          y: 7
        }
      ],
      11: [
        {
          x: 2,
          y: 2
        },
        {
          x: 8,
          y: 2
        },
        {
          x: 5,
          y: 5
        },
        {
          x: 2,
          y: 8
        },
        {
          x: 8,
          y: 8
        }
      ],
      12: [
        {
          x: 3,
          y: 3
        },
        {
          x: 8,
          y: 3
        },
        {
          x: 3,
          y: 8
        },
        {
          x: 8,
          y: 8
        }
      ],
      13: [
        {
          x: 3,
          y: 3
        },
        {
          x: 9,
          y: 3
        },
        {
          x: 6,
          y: 6
        },
        {
          x: 3,
          y: 9
        },
        {
          x: 9,
          y: 9
        }
      ],
      14: [
        {
          x: 3,
          y: 3
        },
        {
          x: 10,
          y: 3
        },
        {
          x: 3,
          y: 10
        },
        {
          x: 10,
          y: 10
        }
      ],
      15: [
        {
          x: 3,
          y: 3
        },
        {
          x: 11,
          y: 3
        },
        {
          x: 7,
          y: 7
        },
        {
          x: 3,
          y: 11
        },
        {
          x: 11,
          y: 11
        }
      ],
      16: [
        {
          x: 3,
          y: 3
        },
        {
          x: 12,
          y: 3
        },
        {
          x: 3,
          y: 12
        },
        {
          x: 12,
          y: 12
        }
      ],
      17: [
        {
          x: 3,
          y: 3
        },
        {
          x: 8,
          y: 3
        },
        {
          x: 13,
          y: 3
        },
        {
          x: 3,
          y: 8
        },
        {
          x: 8,
          y: 8
        },
        {
          x: 13,
          y: 8
        },
        {
          x: 3,
          y: 13
        },
        {
          x: 8,
          y: 13
        },
        {
          x: 13,
          y: 13
        }
      ],
      18: [
        {
          x: 3,
          y: 3
        },
        {
          x: 14,
          y: 3
        },
        {
          x: 3,
          y: 14
        },
        {
          x: 14,
          y: 14
        }
      ],
      19: [
        {
          x: 3,
          y: 3
        },
        {
          x: 9,
          y: 3
        },
        {
          x: 15,
          y: 3
        },
        {
          x: 3,
          y: 9
        },
        {
          x: 9,
          y: 9
        },
        {
          x: 15,
          y: 9
        },
        {
          x: 3,
          y: 15
        },
        {
          x: 9,
          y: 15
        },
        {
          x: 15,
          y: 15
        }
      ],
      20: [
        {
          x: 3,
          y: 3
        },
        {
          x: 16,
          y: 3
        },
        {
          x: 3,
          y: 16
        },
        {
          x: 16,
          y: 16
        }
      ],
      21: [
        {
          x: 3,
          y: 3
        },
        {
          x: 10,
          y: 3
        },
        {
          x: 17,
          y: 3
        },
        {
          x: 3,
          y: 10
        },
        {
          x: 10,
          y: 10
        },
        {
          x: 17,
          y: 10
        },
        {
          x: 3,
          y: 17
        },
        {
          x: 10,
          y: 17
        },
        {
          x: 17,
          y: 17
        }
      ]
    },
    drawStar: !1,
    stoneHandler: c.drawHandlers.SHELL,
    section: {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    },
    background: l.DIR + 'textures/wood1.jpg',
    theme: {
    }
  },
  l.Board = c;
  var L = function (t) {
    this.size = t || l.DEFAULT_LINE,
    this.schema = [
    ];
    for (var e = 0; e < this.size * this.size; e++) this.schema[e] = l.E
  };
  L.prototype = {
    constructor: l.Position,
    get: function (t, e) {
      return t < 0 || e < 0 || t >= this.size || e >= this.size ? o : this.schema[t * this.size + e]
    },
    set: function (t, e, i) {
      return this.schema[t * this.size + e] = i,
      this
    },
    clear: function () {
      for (var t = 0; t < this.size * this.size; t++) this.schema[t] = l.E;
      return this
    },
    fill: function (t) {
      for (var e = 0; e < this.size * this.size; e++) this.schema[e] = t;
      return this
    },
    clone: function () {
      var t = new L(this.size);
      return t.schema = this.schema.slice(0),
      t
    },
    compare: function (t) {
      for (var e = [
      ], i = [
      ], n = 0; n < this.size * this.size; n++) this.schema[n] && !t.schema[n] ? i.push({
        x: Math.floor(n / this.size),
        y: n % this.size
      })  : this.schema[n] != t.schema[n] && e.push({
        x: Math.floor(n / this.size),
        y: n % this.size,
        c: t.schema[n]
      });
      return {
        add: e,
        remove: i
      }
    }
  },
  l.Position = L;
  var R = function (t, e, i, n) {
    this.size = t || 19,
    this.repeating = e === o ? 'KO' : e,
    this.allow_rewrite = i || !1,
    this.allow_suicide = n || !1,
    this.stack = [
    ],
    this.stack[0] = new L(this.size),
    this.stack[0].capCount = {
      black: 0,
      white: 0
    },
    this.turn = l.B,
    Object.defineProperty(this, 'position', {
      get: function () {
        return this.stack[this.stack.length - 1]
      },
      set: function (t) {
        this.stack[this.stack.length - 1] = t
      }
    })
  },
  M = function (t, e, i, n, s) {
    0 <= i && i < t.size && 0 <= n && n < t.size && t.get(i, n) == s && (t.set(i, n, l.E), e.push({
      x: i,
      y: n
    }), M(t, e, i, n - 1, s), M(t, e, i, n + 1, s), M(t, e, i - 1, n, s), M(t, e, i + 1, n, s))
  },
  _ = function (t, e, i, n, s) {
    return i < 0 || i >= t.size || n < 0 || n >= t.size || t.get(i, n) != l.E && (1 == e.get(i, n) || t.get(i, n) == - s || (e.set(i, n, !0), _(t, e, i, n - 1, s) && _(t, e, i, n + 1, s) && _(t, e, i - 1, n, s) && _(t, e, i + 1, n, s)))
  },
  z = function (t, e, i, n) {
    var s = [
    ];
    if (0 <= e && e < t.size && 0 <= i && i < t.size && t.get(e, i) == n) {
      var o = new L(t.size);
      _(t, o, e, i, n) && M(t, s, e, i, n)
    }
    return s
  };
  R.prototype = {
    constructor: R,
    getPosition: function () {
      return this.stack[this.stack.length - 1]
    },
    play: function (t, e, i, n) {
      if (!this.isOnBoard(t, e)) return 1;
      if (!this.allow_rewrite && this.position.get(t, e) != l.E) return 2;
      i || (i = this.turn);
      var s = this.position.clone();
      s.set(t, e, i);
      var o = i,
      r = z(s, t - 1, e, - i).concat(z(s, t + 1, e, - i), z(s, t, e - 1, - i), z(s, t, e + 1, - i));
      if (!r.length) {
        var a = new L(this.size);
        if (a.fill(!1), _(s, a, t, e, i)) {
          if (!this.allow_suicide) return 3;
          o = - i,
          M(s, r, t, e, i)
        }
      }
      return this.repeating && !function (t, e, i) {
        var n,
        s;
        if ('KO' == this.repeating && 0 <= this.stack.length - 2) s = this.stack.length - 2;
         else {
          if ('ALL' != this.repeating) return !0;
          s = 0
        }
        for (var o = this.stack.length - 2; s <= o; o--) if (this.stack[o].get(e, i) == t.get(e, i)) {
          n = !0;
          for (var r = 0; r < this.size * this.size; r++) if (this.stack[o].schema[r] != t.schema[r]) {
            n = !1;
            break
          }
          if (n) return !1
        }
        return !0
      }.call(this, s, t, e) ? 4 : !n && (s.color = i, s.capCount = {
        black: this.position.capCount.black,
        white: this.position.capCount.white
      }, o == l.B ? s.capCount.black += r.length : s.capCount.white += r.length, this.pushPosition(s), this.turn = - i, r)
    },
    pass: function (t) {
      this.pushPosition(),
      t ? (this.position.color = t, this.turn = - t)  : (this.position.color = this.turn, this.turn = - this.turn)
    },
    isValid: function (t, e, i) {
      return 'number' != typeof this.play(t, e, i, !0)
    },
    isOnBoard: function (t, e) {
      return 0 <= t && 0 <= e && t < this.size && e < this.size
    },
    addStone: function (t, e, i) {
      return !(!this.isOnBoard(t, e) || this.position.get(t, e) != l.E) && (this.position.set(t, e, i || l.E), !0)
    },
    removeStone: function (t, e) {
      return !(!this.isOnBoard(t, e) || this.position.get(t, e) == l.E) && (this.position.set(t, e, l.E), !0)
    },
    setStone: function (t, e, i) {
      return !!this.isOnBoard(t, e) && (this.position.set(t, e, i || l.E), !0)
    },
    getStone: function (t, e) {
      return this.isOnBoard(t, e) ? this.position.get(t, e)  : l.E
    },
    pushPosition: function (t) {
      t || ((t = this.position.clone()).capCount = {
        black: this.position.capCount.black,
        white: this.position.capCount.white
      }, t.c = this.position.color);
      return this.stack.push(t),
      t.color && (this.turn = - t.color),
      this
    },
    popPosition: function () {
      var t = null;
      return 0 < this.stack.length && (t = this.stack.pop(), 0 == this.stack.length ? this.turn = l.B : this.position.color ? this.turn = - this.position.color : this.turn = - this.turn),
      t
    },
    firstPosition: function () {
      return this.stack = [
      ],
      this.stack[0] = new L(this.size),
      this.stack[0].capCount = {
        black: 0,
        white: 0
      },
      this.turn = l.B,
      this
    },
    getCaptureCount: function (t) {
      return t == l.B ? this.position.capCount.black : this.position.capCount.white
    },
    validatePosition: function () {
      for (var t, e, i = 0, n = 0, s = [
      ], o = this.position.clone(), r = 0; r < this.size; r++) for (var a = 0; a < this.size; a++) (t = this.position.get(r, a)) && (e = s.length, s = s.concat(z(o, r - 1, a, - t), z(o, r + 1, a, - t), z(o, r, a - 1, - t), z(o, r, a + 1, - t)), t == l.B ? n += s - e : i += s - e);
      return this.position.capCount.black += n,
      this.position.capCount.white += i,
      this.position.schema = o.schema,
      s
    }
  },
  l.Game = R,
  s.JQi = l
}(window),
function (c, a) {
  'use strict';
  var n = function (t) {
    var e = new y(JSON.parse(JSON.stringify(t.getProperties())));
    for (var i in t.children) e.appendChild(n(t.children[i]));
    return e
  },
  s = function (t, e) {
    var i;
    if (e[t] !== a) return e[t];
    for (var n in e.children) if (i = s(t, e.children[n])) return i;
    return !1
  },
  o = function (t, e) {
    if (t.push(JSON.parse(JSON.stringify(e.getProperties()))), 1 < e.children.length) {
      for (var i = [
      ], n = 0; n < e.children.length; n++) {
        var s = [
        ];
        o(s, e.children[n]),
        i.push(s)
      }
      t.push(i)
    } else e.children.length && o(t, e.children[0])
  },
  r = function (t, e) {
    for (var i, n = e, s = 1; s < t.length; s++) if (t[s].constructor == Array) for (var o = 0; o < t[s].length; o++) i = new y(t[s][o][0]),
    n.appendChild(i),
    r(t[s][o], i);
     else i = new y(t[s]),
    n.insertAfter(i),
    n = i
  },
  d = function (t) {
    return 'string' == typeof t ? t.replace(/\\/g, '\\\\').replace(/]/g, '\\]')  : t
  },
  i = 'a'.charCodeAt(0),
  u = function (t, e) {
    return String.fromCharCode(i + t) + String.fromCharCode(i + e)
  },
  p = function (t, e, i) {
    if (e.length) for (var n in i.sgf += t, e) i.sgf += '[' + e[n] + ']'
  },
  f = function (t, e) {
    if (t.move) {
      var i = '';
      t.move.pass || (i = u(t.move.x, t.move.y)),
      t.move.c == c.B ? e.sgf += 'B[' + i + ']' : e.sgf += 'W[' + i + ']'
    }
    if (t.setup) {
      var n = [
      ],
      s = [
      ],
      o = [
      ];
      for (var r in t.setup) t.setup[r].c == c.B ? n.push(u(t.setup[r].x, t.setup[r].y))  : t.setup[r].c == c.W ? s.push(u(t.setup[r].x, t.setup[r].y))  : o.push(u(t.setup[r].x, t.setup[r].y));
      p('AB', n, e),
      p('AW', s, e),
      p('AE', o, e)
    }
    if (t.markup) {
      var a = {
      };
      for (var r in t.markup) a[t.markup[r].type] = a[t.markup[r].type] || [
      ],
      'LB' == t.markup[r].type ? a.LB.push(u(t.markup[r].x, t.markup[r].y) + ':' + d(t.markup[r].text))  : a[t.markup[r].type].push(u(t.markup[r].x, t.markup[r].y));
      for (var h in a) p(h, a[h], e)
    }
    var l = t.getProperties();
    for (var h in l) 'object' != typeof l[h] && (e.sgf += 'turn' == h ? 'PL[' + (l[h] == c.B ? 'B' : 'W') + ']' : 'comment' == h ? 'C[' + d(l[h]) + ']' : h + '[' + d(l[h]) + ']');
    if (1 == t.children.length) e.sgf += '\n;',
    f(t.children[0], e);
     else if (1 < t.children.length) for (var h in t.children) m(t.children[h], e)
  },
  m = function (t, e) {
    e.sgf += '(\n;',
    f(t, e),
    e.sgf += '\n)'
  },
  h = function () {
    this.size = c.DEFAULT_LINE,
    this.info = {
    },
    this.root = new y,
    this.nodeCount = 0,
    this.propertyCount = 0
  };
  h.prototype = {
    constructor: h,
    clone: function () {
      var t = new h;
      return t.size = this.size,
      t.info = JSON.parse(JSON.stringify(this.info)),
      t.root = n(this.root),
      t.nodeCount = this.nodeCount,
      t.propertyCount = this.propertyCount,
      t
    },
    hasComments: function () {
      return !!s('comment', this.root)
    }
  },
  h.fromSgf = function (t) {
    return c.SGF.parse(t)
  },
  h.fromJWQ = function (t) {
    var e = 'string' == typeof t ? JSON.parse(t)  : t,
    i = new h;
    return i.info = JSON.parse(JSON.stringify(e.info)),
    i.size = e.size,
    i.nodeCount = e.nodeCount,
    i.propertyCount = e.propertyCount,
    i.root = new y(e.game[0]),
    r(e.game, i.root),
    i
  },
  h.prototype.toSgf = function () {
    var t = {
      sgf: '(\n;'
    },
    e = {
    };
    for (var i in this.info) 'black' == i ? (this.info.black.name && (e.PB = d(this.info.black.name)), this.info.black.rank && (e.BR = d(this.info.black.rank)), this.info.black.team && (e.BT = d(this.info.black.team)))  : 'white' == i ? (this.info.white.name && (e.PW = d(this.info.white.name)), this.info.white.rank && (e.WR = d(this.info.white.rank)), this.info.white.team && (e.WT = d(this.info.white.team)))  : e[i] = d(this.info[i]);
    for (var i in this.size && (e.SZ = this.size), e.AP || (e.AP = 'JQi.js:1'), e.FF || (e.FF = '1'), e.GM || (e.GM = '1'), e.CA || (e.CA = 'UTF-8'), e) e[i] && (t.sgf += i + '[' + e[i] + ']');
    return f(this.root, t),
    t.sgf += ')',
    t.sgf
  },
  h.prototype.toJWQ = function (t) {
    var e = {
    };
    return e.size = this.size,
    e.info = JSON.parse(JSON.stringify(this.info)),
    e.nodeCount = this.nodeCount,
    e.propertyCount = this.propertyCount,
    e.game = [
    ],
    o(e.game, this.root),
    t ? JSON.stringify(e)  : e
  };
  var t = function (t) {
    var e;
    return t.name ? (e = c.filterHTML(t.name), t.rank && (e += ' (' + c.filterHTML(t.rank) + ')'), t.team && (e += ', ' + c.filterHTML(t.team)))  : (t.team && (e = c.filterHTML(t.team)), t.rank && (e += ' (' + c.filterHTML(t.rank) + ')')),
    e
  };
  h.infoFormatters = {
    black: t,
    white: t,
    TM: function (t) {
      if (0 == t) return c.t('none');
      var e,
      i = Math.floor(t / 60);
      return 1 == i ? e = '1 ' + c.t('minute')  : 1 < i && (e = i + ' ' + c.t('minutes')),
      1 == (i = t % 60) ? e += ' 1 ' + c.t('second')  : 1 < i && (e += ' ' + i + ' ' + c.t('seconds')),
      e
    }
  },
  h.infoList = [
    'black',
    'white',
    'AN',
    'CP',
    'DT',
    'EV',
    'GN',
    'GC',
    'HA',
    'ON',
    'OT',
    'RE',
    'RO',
    'RU',
    'SO',
    'TM',
    'US',
    'PC',
    'KM'
  ],
  c.Record = h;
  var e = function (t, e, i) {
    for (var n = 0; n < t.length; n++) if (t[n].x == e.x && t[n].y == e.y) return void (t[n][i] = e[i]);
    t.push(e)
  },
  l = function (t, e) {
    if (t) for (var i = 0; i < t.length; i++) if (t[i].x == e.x && t[i].y == e.y) return void t.splice(i, 1)
  },
  y = function (t, e) {
    if (this.parent = e || null, this.children = [
    ], t) for (var i in t) this[i] = t[i]
  };
  y.prototype = {
    constructor: y,
    getChild: function (t) {
      var e = t || 0;
      return this.children[e] ? this.children[e] : null
    },
    addSetup: function (t) {
      return this.setup = this.setup || [
      ],
      e(this.setup, t, 'c'),
      this
    },
    removeSetup: function (t) {
      return l(this.setup, t),
      this
    },
    addMarkup: function (t) {
      return this.markup = this.markup || [
      ],
      e(this.markup, t, 'type'),
      this
    },
    removeMarkup: function (t) {
      return l(this.markup, t),
      this
    },
    remove: function () {
      var t = this.parent;
      if (!t) throw new Exception('Root node cannot be removed');
      for (var e in t.children) if (t.children[e] == this) {
        t.children.splice(e, 1);
        break
      }
      return t.children = t.children.concat(this.children),
      this.parent = null,
      t
    },
    insertAfter: function (t) {
      for (var e in this.children) this.children[e].parent = t;
      return t.children = t.children.concat(this.children),
      (t.parent = this).children = [
        t
      ],
      t
    },
    appendChild: function (t) {
      return (t.parent = this).children.push(t),
      t
    },
    getProperties: function () {
      var t = {
      };
      for (var e in this) this.hasOwnProperty(e) && 'children' != e && 'parent' != e && '_' != e[0] && (t[e] = this[e]);
      return t
    }
  },
  c.TNode = y;
  var v = function (t, e) {
    for (var i = t.size, n = [
    ], s = [
    ], o = 0; o < i * i; o++) t.schema[o] && !e.schema[o] ? s.push({
      x: Math.floor(o / i),
      y: o % i
    })  : t.schema[o] != e.schema[o] && n.push({
      x: Math.floor(o / i),
      y: o % i,
      c: e.schema[o]
    });
    return {
      add: n,
      remove: s
    }
  },
  g = function (t, e, i) {
    this.record = t,
    this.node = this.record.root,
    this.allow_illegal = i || !1,
    this.game = new c.Game(this.record.size, this.allow_illegal ? 'NONE' : 'KO', this.allow_illegal, this.allow_illegal),
    this.path = {
      m: 0
    },
    this.record.info.HA && 1 < this.record.info.HA && (this.game.turn = c.W),
    this.change = x(this.game, this.node, !0),
    this.rememberPath = !!e
  },
  b = function (t, e) {
    var i,
    n = [
    ];
    for (var s in t) {
      for (var o in i = !0, e) if (t[s].x == e[o].x && t[s].y == e[o].y) {
        i = !1;
        break
      }
      i && n.push(t[s])
    }
    return n
  },
  x = function (t, e, i) {
    if (e.parent && (e.parent._last_selected = e.parent.children.indexOf(e)), e.move != a) {
      if (e.move.pass) return t.pass(e.move.c),
      {
        add: [
        ],
        remove: [
        ]
      };
      var n = t.play(e.move.x, e.move.y, e.move.c);
      if ('number' == typeof n) throw new L(n, e);
      for (var s in n) if (n[s].x == e.move.x && n[s].y == e.move.y) return {
        add: [
        ],
        remove: n
      };
      return {
        add: [
          e.move
        ],
        remove: n
      }
    }
    i || t.pushPosition();
    var o = [
    ],
    r = [
    ];
    if (e.setup != a) for (var s in e.setup) e.setup[s].c ? (t.setStone(e.setup[s].x, e.setup[s].y, e.setup[s].c), o.push(e.setup[s]))  : (t.removeStone(e.setup[s].x, e.setup[s].y), r.push(e.setup[s]));
    return e.turn && (t.turn = e.turn),
    {
      add: o,
      remove: r
    }
  },
  w = function (t) {
    t === a && this.rememberPath && (t = this.node._last_selected),
    t = t || 0;
    var e = this.node.children[t];
    if (!e) return !1;
    var i = x(this.game, e);
    return this.path.m++,
    1 < this.node.children.length && (this.path[this.path.m] = t),
    this.node = e,
    i
  },
  C = function () {
    return !!this.node.parent && (this.node = this.node.parent, this.game.popPosition(), this.node.turn && (this.game.turn = this.node.turn), this.path[this.path.m] !== a && delete this.path[this.path.m], this.path.m--, !0)
  },
  k = function () {
    this.node.parent && (this.game.firstPosition(), this.node = this.record.root, this.path = {
      m: 0
    }, this.record.info.HA && 1 < this.record.info.HA && (this.game.turn = c.W), this.change = x(this.game, this.node, !0))
  };
  g.prototype = {
    constructor: g,
    next: function (t) {
      return this.change = w.call(this, t),
      this
    },
    last: function () {
      var t,
      e,
      i;
      for (this.change = {
        add: [
        ],
        remove: [
        ]
      }; t = w.call(this); ) e = this.change,
      i = t,
      e.add = b(e.add, i.remove).concat(i.add),
      e.remove = b(e.remove, i.add).concat(i.remove);
      return this
    },
    previous: function () {
      var t = this.game.getPosition();
      return C.call(this),
      this.change = v(t, this.game.getPosition()),
      this
    },
    first: function () {
      var t = this.game.getPosition();
      return k.call(this),
      this.change = v(t, this.game.getPosition()),
      this
    },
    goTo: function (t) {
      if (t === a) return this;
      if ( - 1 != t.m) {
        if (0 != t.m) {
          var e = this.game.getPosition();
          k.call(this);
          for (var i = 0; i < t.m && w.call(this, t[i + 1]); i++);
          return this.change = v(e, this.game.getPosition()),
          this
        }
        this.first()
      } else this.last()
    },
    previousFork: function () {
      for (var t = this.game.getPosition(); C.call(this) && 1 == this.node.children.length; );
      return this.change = v(t, this.game.getPosition()),
      this
    },
    getPosition: function () {
      return this.game.getPosition()
    },
    allowIllegalMoves: function (t) {
      t ? (this.game.allow_rewrite = !0, this.game.allow_suicide = !0, this.repeating = 'NONE')  : (this.game.allow_rewrite = !1, this.game.allow_suicide = !1, this.repeating = 'KO')
    }
  },
  c.RecordReader = g;
  var L = function (t, e) {
    if (this.name = c.t('moveerror'), this.message = c.t('invalidmove'), e.move && e.move.c !== a && e.move.x !== a && e.move.y !== a) {
      var i = e.move.x + 'A'.charCodeAt(0);
      i >= 'I'.charCodeAt(0) && i++,
      this.message += (e.move.c == c.W ? c.t('white')  : c.t('black')) + ' ' + String.fromCharCode(i) + (c.DEFAULT_LINE - e.move.y)
    } else this.message += c.t('nullmove');
    if (t) switch (t) {
      case 1:
        this.message += c.t('outside');
        break;
      case 2:
        this.message += c.t('notempty');
        break;
      case 3:
        this.message += c.t('suicide');
        break;
      case 4:
        this.message += c.t('repetition')
    }
  };
  L.prototype = new Error,
  L.prototype.constructor = L,
  c.InvalidMoveError = L,
  c.i18n.en.moveerror = 'MoveError',
  c.i18n.en.invalidmove = 'Invalid move.',
  c.i18n.en.nullmove = ' Move object no attributes.',
  c.i18n.en.outside = ' outside the board.',
  c.i18n.en.notempty = ' point not empty.',
  c.i18n.en.suicide = ' move is suicide.',
  c.i18n.en.repetition = ' full board repetition.'
}(JQi),
function (d, t) {
  d.SGF = {
  };
  var o = function (t, e) {
    return t.charCodeAt(e) - 97
  },
  e = function (t, e, i, n, s, o) {
    var r = o == e ? 'black' : 'white';
    i.info[r] = i.info[r] || {
    },
    i.info[r][t] = s[0]
  },
  i = d.SGF.properties = {
  };
  i.B = i.W = function (t, e, i, n) {
    !i[0] || t.size <= d.DEFAULT_LINE && 'tt' == i[0] ? e.move = {
      pass: !0,
      c: 'B' == n ? d.B : d.W
    }
     : e.move = {
      x: o(i[0], 0),
      y: o(i[0], 1),
      c: 'B' == n ? d.B : d.W
    }
  },
  i.AB = i.AW = function (t, e, i, n) {
    for (var s in i) e.addSetup({
      x: o(i[s], 0),
      y: o(i[s], 1),
      c: 'AB' == n ? d.B : d.W
    })
  },
  i.AE = function (t, e, i) {
    for (var n in i) e.addSetup({
      x: o(i[n], 0),
      y: o(i[n], 1),
      c: d.E
    })
  },
  i.PL = function (t, e, i) {
    e.turn = 'b' == i[0] || 'B' == i[0] ? d.B : d.W
  },
  i.C = function (t, e, i) {
    e.comment = i.join()
  },
  i.LB = function (t, e, i) {
    for (var n in i) e.addMarkup({
      x: o(i[n], 0),
      y: o(i[n], 1),
      type: 'LB',
      text: i[n].substr(3)
    })
  },
  i.CR = i.SQ = i.TR = i.SL = i.MA = i.SM = function (t, e, i, n) {
    for (var s in i) e.addMarkup({
      x: o(i[s], 0),
      y: o(i[s], 1),
      type: n
    })
  },
  i.SZ = function (t, e, i) {
    t.size = parseInt(i[0])
  },
  i.BR = i.WR = e.bind(this, 'rank', 'BR'),
  i.PB = i.PW = e.bind(this, 'name', 'PB'),
  i.BT = i.WT = e.bind(this, 'team', 'BT'),
  i.TM = function (t, e, i, n) {
    t.info[n] = i[0],
    e.BL = i[0],
    e.WL = i[0]
  };
  var u = /\(|\)|(;(\s*[A-Z]+(\s*((\[\])|(\[(.|\s)*?([^\\]\]))))+)*)/g,
  p = /[A-Z]+(\s*((\[\])|(\[(.|\s)*?([^\\]\]))))+/g,
  f = /[A-Z]+/,
  m = /(\[\])|(\[(.|\s)*?([^\\]\]))/g;
  d.SGF.parse = function (t) {
    var e,
    i,
    n,
    s,
    o = [
    ],
    r = new d.Record,
    a = null;
    for (var h in e = t.match(u)) if ('(' == e[h]) o.push(a);
     else if (')' == e[h]) a = o.pop();
     else for (var l in a && r.nodeCount++, a = a ? a.appendChild(new d.TNode)  : r.root, i = e[h].match(p) || [
    ], r.propertyCount += i.length, i) {
      for (var c in s = f.exec(i[l]) [0], n = i[l].match(m)) n[c] = n[c].substring(1, n[c].length - 1).replace(/\\(?!\\)/g, '');
      d.SGF.properties[s] ? d.SGF.properties[s](r, a, n, s)  : (n.length <= 1 && (n = n[0]), a.parent ? a[s] = n : r.info[s] = n)
    }
    return r
  }
}(JQi),
function (s) {
  'use strict';
  var n = function (t, e) {
    this.name = s.t('fileerror'),
    this.message = 1 == e ? t + s.t('isempty')  : 2 == e ? t + s.t('readerror')  : t + s.t('notfound')
  };
  (n.prototype = new Error).constructor = n,
  s.FileError = n;
  var o = s.loadFromUrl = function (e, t) {
    var i = new XMLHttpRequest;
    i.onreadystatechange = function () {
      if (4 == i.readyState) {
        if (200 != i.status) throw new n(e);
        if (0 == i.responseText.length) throw new n(e, 1);
        t(i.responseText)
      }
    };
    try {
      i.open('GET', e, !0),
      i.send()
    } catch (t) {
      throw new n(e, 2)
    }
  },
  r = function (t, e) {
    return t != e.element && t != e.element && (!!(t._jqi_scrollable || t.scrollHeight > t.offsetHeight && 'auto' == window.getComputedStyle(t).overflow) || r(t.parentNode, e))
  },
  i = function (t) {
    for (var e in this.config = t, i.default) void 0 === this.config[e] && void 0 !== i.default[e] && (this.config[e] = i.default[e]); this.element = document.createElement('div'), this.board = new s.Board(this.element, this.config.board), this.init(), this.initGame()
  };
  i.prototype = {
    constructor: i,
    init: function () {
      this.record = null,
      this.listeners = {
        recordLoaded: [
          function (t) {
            this.board.setSize(t.record.size),
            this.board.removeAllObjects(),
            this.config.enableWheel && this.setWheel(!0)
          }.bind(this)
        ],
        update: [
          function (t) {
            t.change && this.board.update(t.change),
            this.temp_marks && this.board.removeObject(this.temp_marks),
            this.notification();
            var e = [
            ];
            if (t.node.move && this.config.markLastMove && (t.node.move.pass ? this.notification(s.t((t.node.move.c == s.B ? 'b' : 'w') + 'pass'))  : e.push({
              type: 'SN',
              x: t.node.move.x,
              y: t.node.move.y,
              text: String(t.path.m),
              c: this.board.theme.lastColor || 'rgba(255,0,0,0.8)'
            })), 1 < t.node.children.length && this.config.displayVariations) for (var i = 0; i < t.node.children.length; i++) t.node.children[i].move && !t.node.children[i].move.pass && e.push({
              type: 'LB',
              text: String.fromCharCode(65 + i),
              x: t.node.children[i].move.x,
              y: t.node.children[i].move.y,
              c: this.board.theme.variationColor || 'rgba(0,32,128,0.8)'
            });
            if (t.node.markup) {
              for (var i in t.node.markup) for (var n = 0; n < e.length; n++) t.node.markup[i].x == e[n].x && t.node.markup[i].y == e[n].y && (e.splice(n, 1), n--);
              e = e.concat(t.node.markup)
            }
            this.temp_marks = e,
            this.board.addObject(e)
          }.bind(this)
        ],
        frozen: [
        ],
        unfrozen: [
        ]
      },
      this.config.recordLoaded && this.addEventListener('recordLoaded', this.config.recordLoaded),
      this.config.update && this.addEventListener('update', this.config.update),
      this.config.frozen && this.addEventListener('frozen', this.config.frozen),
      this.config.unfrozen && this.addEventListener('unfrozen', this.config.unfrozen),
      this.board.addEventListener('click', function (t, e) {
        if (!this.recordReader || !this.recordReader.node) return !1;
        for (var i in this.recordReader.node.children) if (this.recordReader.node.children[i].move && this.recordReader.node.children[i].move.x == t && this.recordReader.node.children[i].move.y == e) return void this.next(i)
      }.bind(this)),
      this.element.addEventListener('click', this.focus.bind(this)),
      this.focus()
    },
    initGame: function () {
      this.config.sgf ? this.loadSgf(this.config.sgf, this.config.move)  : this.config.json ? this.loadJSON(this.config.json, this.config.move)  : this.config.sgfFile && this.loadSgfFromFile(this.config.sgfFile, this.config.move)
    },
    update: function (t) {
      if (this.recordReader && this.recordReader.change) {
        var e = {
          type: 'update',
          op: t,
          target: this,
          node: this.recordReader.node,
          position: this.recordReader.getPosition(),
          path: this.recordReader.path,
          change: this.recordReader.change
        };
        this.dispatchEvent(e)
      }
    },
    loadRecord: function (t, e) {
      this.record = t,
      this.recordReader = new s.RecordReader(this.record, this.config.rememberPath, this.config.allowIllegalMoves),
      this.dispatchEvent({
        type: 'recordLoaded',
        target: this,
        record: this.record
      }),
      this.update('init'),
      e && this.goTo(e)
    },
    loadSgf: function (t, e) {
      try {
        this.loadRecord(s.Record.fromSgf(t), e)
      } catch (t) {
        this.error(t)
      }
    },
    loadJSON: function (t, e) {
      try {
        this.loadRecord(s.Record.fromJWQ(t), e)
      } catch (t) {
        this.error(t)
      }
    },
    loadSgfFromFile: function (t, e) {
      var i = this;
      try {
        o(t, function (t) {
          i.loadSgf(t, e)
        })
      } catch (t) {
        this.error(t)
      }
    },
    addEventListener: function (t, e) {
      this.listeners[t] = this.listeners[t] || [
      ],
      this.listeners[t].push(e)
    },
    removeEventListener: function (t, e) {
      if (this.listeners[t]) {
        var i = this.listeners[t].indexOf(e);
        - 1 != i && this.listeners[t].splice(i, 1)
      }
    },
    dispatchEvent: function (t) {
      if (this.listeners[t.type]) for (var e in this.listeners[t.type]) this.listeners[t.type][e](t)
    },
    notification: function (t) {
      console && t && console.log(t)
    },
    help: function (t) {
      console && t && console.log(t)
    },
    error: function (t) {
      if (!s.ERROR_REPORT) throw t;
      console && t && console.log(t)
    },
    next: function (t) {
      if (!this.frozen && this.record) try {
        this.recordReader.next(t),
        this.update()
      } catch (t) {
        this.error(t)
      }
    },
    previous: function () {
      if (!this.frozen && this.record) try {
        this.recordReader.previous(),
        this.update()
      } catch (t) {
        this.error(t)
      }
    },
    last: function () {
      if (!this.frozen && this.record) try {
        this.recordReader.last(),
        this.update()
      } catch (t) {
        this.error(t)
      }
    },
    first: function () {
      if (!this.frozen && this.record) try {
        this.recordReader.first(),
        this.update()
      } catch (t) {
        this.error(t)
      }
    },
    goTo: function (t) {
      if (!this.frozen && this.record) {
        var e;
        'function' == typeof t && (t = t.call(this)),
        'number' == typeof t ? (e = s.clone(this.recordReader.path)).m = t || 0 : e = t;
        try {
          this.recordReader.goTo(e),
          this.update()
        } catch (t) {
          this.error(t)
        }
      }
    },
    getGameInfo: function (t) {
      if (!this.record) return null;
      var e = {
      };
      for (var i in this.record.info) - 1 != s.Record.infoList.indexOf(i) && - 1 == t.indexOf(i) && (s.Record.infoFormatters[i] ? e[s.t(i)] = s.Record.infoFormatters[i](this.record.info[i])  : e[s.t(i)] = s.filterHTML(this.record.info[i]));
      return e
    },
    setFrozen: function (t) {
      this.frozen = t,
      this.dispatchEvent({
        type: this.frozen ? 'frozen' : 'unfrozen',
        target: this
      })
    },
    appendTo: function (t) {
      t.appendChild(this.element)
    },
    focus: function () {
      this.config.enableKeys && this.setKeys(!0)
    },
    setKeys: function (t) {
      document.onkeydown = t ? function (t) {
        if (document.querySelector('input:focus, textarea:focus')) return !0;
        switch (t.keyCode) {
          case 39:
            this.next();
            break;
          case 37:
            this.previous();
            break;
          default:
            return !0
        }
        return this.config.lockScroll && t.preventDefault && t.preventDefault(),
        !this.config.lockScroll
      }.bind(this) : null
    },
    setWheel : function (t) {
      if (!this._wheel_listener && t) {
        this._wheel_listener = function (t) {
          var e = t.wheelDelta || - 1 * t.detail;
          return !(!r(t.target, this) && (e < 0 ? (this.next(), this.config.lockScroll && t.preventDefault && t.preventDefault(), this.config.lockScroll)  : 0 < e && (this.previous(), this.config.lockScroll && t.preventDefault && t.preventDefault(), this.config.lockScroll)))
        }.bind(this);
        var e = void 0 !== document.onmousewheel ? 'mousewheel' : 'DOMMouseScroll';
        this.element.addEventListener(e, this._wheel_listener)
      } else if (this._wheel_listener && !t) {
        var i = void 0 !== document.onmousewheel ? 'mousewheel' : 'DOMMouseScroll';
        this.element.removeEventListener(i, this._wheel_listener),
        delete this._wheel_listener
      }
    }
  },
  i.default = {
    sgf: void 0,
    json: void 0,
    sgfFile: void 0,
    move: void 0,
    board: {
    },
    enableWheel: !0,
    lockScroll: !0,
    enableKeys: !0,
    markLastMove: !0,
    recordLoaded: void 0,
    update: void 0,
    frozen: void 0,
    unfrozen: void 0,
    rememberPath: !0,
    allowIllegalMoves: !1,
    displayVariations: !0
  },
  s.Replayer = i;
  var t = {
    black: 'Black',
    white: 'White',
    DT: 'Date',
    KM: 'Keep impartial',
    HA: 'Handicap',
    AN: 'Annotations',
    CP: 'Copyright',
    GC: 'Game comments',
    GN: 'Game name',
    ON: 'Opening',
    OT: 'Overtime',
    TM: 'Basic time',
    RE: 'Result',
    RO: 'Round',
    RU: 'Rules',
    US: 'Recorder',
    PC: 'Place',
    EV: 'Event',
    SO: 'Source',
    none: 'none',
    bpass: 'Black passed.',
    wpass: 'White passed.',
    fileerror: 'FileError',
    isempty: ' is empty.',
    readerror: ' read error.',
    notfound: ' not found.'
  };
  for (var e in t) s.i18n.en[e] = t[e]
}(JQi),
function (JQi) {
  'use strict';
  var pl_count = 0,
  replayerBlock = function (t, e, i) {
    var n = {
    };
    return n.element = document.createElement('div'),
    n.element.className = 'jqi-replayer-' + t,
    n.wrapper = document.createElement('div'),
    n.wrapper.className = 'jqi-replayer-' + t + '-wrapper',
    n.element.appendChild(n.wrapper),
    e.appendChild(n.element),
    i || (n.element.style.display = 'none'),
    n
  },
  ReplayerBaseGenerateDom = function () {
    this.dom = {
    },
    this.dom.center = document.createElement('div'),
    this.dom.center.className = 'jqi-replayer-center',
    this.dom.board = document.createElement('div'),
    this.dom.board.className = 'jqi-replayer-board',
    this.regions = {
    },
    this.regions.left = replayerBlock('left', this.element),
    this.element.appendChild(this.dom.center),
    this.regions.right = replayerBlock('right', this.element),
    this.regions.top = replayerBlock('top', this.dom.center),
    this.dom.center.appendChild(this.dom.board),
    this.regions.bottom = replayerBlock('bottom', this.dom.center)
  },
  getCurrentLayout = function () {
    var t = this.config.layout;
    if (t.constructor != Array) return t;
    for (var e = this.height || this.maxHeight, i = 0; i < t.length; i++) if (!t[i].conditions || (!t[i].conditions.minWidth || t[i].conditions.minWidth <= this.width) && (!t[i].conditions.minHeight || !e || t[i].conditions.minHeight <= e) && (!t[i].conditions.maxWidth || t[i].conditions.maxWidth >= this.width) && (!t[i].conditions.maxHeight || !e || t[i].conditions.maxHeight >= e) && (!t[i].conditions.custom || t[i].conditions.custom.call(this))) return t[i]
  },
  enableConfigLayout = function () {
    var t = this.config.layout;
    if (Array.isArray(t) && 0 === t.length || Object.prototype.isPrototypeOf(t) && 0 === Object.keys(t).length) return !0;
    for (var e in t) {
      var i = e,
      n = t[e];
      if (!('left' != i && 'right' != i || 'InfoBox' != n && '' != n)) return !0;
      if (!('top' != i && 'bottome' != i || 'Control' != n && '' != n)) return !0
    }
    return !1
  },
  threeColsLayout = function () {
    var t = this.config.layout;
    for (var e in t) {
      var i = e,
      n = t[e];
      if (('left' == i || 'right' == i) && 'InfoBox' == n) return !0
    }
    return !1
  },
  appendComponents = function (t) {
    var e;
    if (e = this.currentLayout.layout ? this.currentLayout.layout[t] : this.currentLayout[t]) for (var i in this.regions[t].element.style.display = 'block', e.constructor != Array && (e = [
      e
    ]), e) this.components[e[i]] || (this.components[e[i]] = new ReplayerBase.component[e[i]](this)),
    this.components[e[i]].appendTo(this.regions[t].wrapper),
    this.components[e[i]]._detachFromReplayer = !1;
     else this.regions[t].element.style.display = 'none'
  },
  manageComponents = function () {
    for (var t in this.components) this.components[t]._detachFromReplayer = !0;
    for (var t in appendComponents.call(this, 'left'), appendComponents.call(this, 'right'), appendComponents.call(this, 'top'), appendComponents.call(this, 'bottom'), this.components) this.components[t]._detachFromReplayer && this.components[t].element.parentNode && this.components[t].element.parentNode.removeChild(this.components[t].element)
  },
  ReplayerBase = JQi.extendClass(JQi.Replayer, function (t, e) {
    for (var i in this.config = e, ReplayerBase.default) void 0 === this.config[i] && void 0 !== ReplayerBase.default[i] && (this.config[i] = ReplayerBase.default[i]); for (var i in JQi.Replayer.default) void 0 === this.config[i] && void 0 !== JQi.Replayer.default[i] && (this.config[i] = JQi.Replayer.default[i]); enableConfigLayout.call(this) || (this.config.layout = ReplayerBase.dynamicLayout), this.element = t, this.element.innerHTML = '', threeColsLayout.call(this) ? this.classes = 'jqi-three-cols jqi-replayer-main' : this.classes = (this.element.className ? this.element.className + ' ' : '') + 'jqi-replayer-main', this.element.className = this.classes, this.element.id || (this.element.id = 'jqi_' + pl_count++), ReplayerBaseGenerateDom.call(this), this.board = new JQi.Board(this.dom.board, this.config.board), this.init(), this.components = {
    }, window.addEventListener('resize', function () {
      this.noresize || this.updateDimensions()
    }.bind(this)), this.updateDimensions(), this.initGame()
  }); ReplayerBase.prototype.appendTo = function (t) {
    t.appendChild(this.element),
    this.updateDimensions()
  }, ReplayerBase.prototype.updateDimensions = function () {
    for (var t = window.getComputedStyle(this.element), e = [
    ]; this.element.firstChild; ) e.push(this.element.firstChild),
    this.element.removeChild(this.element.firstChild);
    for (var i = parseInt(t.width), n = parseInt(t.height), s = parseInt(t.maxHeight) || 0, o = 0; o < e.length; o++) this.element.appendChild(e[o]);
    if (i != this.width || n != this.height || s != this.maxHeight) {
      this.width = i,
      this.height = n,
      this.maxHeight = s,
      this.currentLayout = getCurrentLayout.call(this),
      this.currentLayout && this.lastLayout != this.currentLayout && (this.currentLayout.className ? this.element.className = this.classes + ' ' + this.currentLayout.className : this.element.className = this.classes, manageComponents.call(this), this.lastLayout = this.currentLayout);
      var r = this.dom.board.clientWidth,
      a = this.height || this.maxHeight;
      a && a < r ? a != this.board.height && this.board.setHeight(a)  : r != this.board.width && this.board.setWidth(r);
      var h = this.dom.board.clientWidth,
      l = this.dom.board.clientHeight;
      for (var o in h < l && this.board.setDimensions(h, h), this.regions.left.element.style.height = this.dom.center.offsetHeight + 'px', this.regions.right.element.style.height = this.dom.center.offsetHeight + 'px', this.components) this.components[o].updateDimensions && this.components[o].updateDimensions()
    }
  }, ReplayerBase.prototype.showMessage = function (t, e, i) {
    this.info_overlay = document.createElement('div'),
    this.info_overlay.style.width = 0.8 * this.element.offsetWidth + 'px',
    this.info_overlay.style.height = 0.8 * this.element.offsetHeight + 'px',
    this.info_overlay.className = 'jqi-info-overlay',
    this.element.appendChild(this.info_overlay);
    var n = document.createElement('div');
    n.className = 'jqi-info-message',
    n.innerHTML = t;
    var s = document.createElement('div');
    s.className = 'jqi-info-close',
    i || (s.innerHTML = JQi.t('closewindow')),
    n.appendChild(s),
    this.info_overlay.appendChild(n),
    e ? this.info_overlay.addEventListener('click', function (t) {
      e(t)
    })  : i || this.info_overlay.addEventListener('click', function (t) {
      this.hideMessage()
    }.bind(this)),
    this.setFrozen(!0)
  }, ReplayerBase.prototype.hideMessage = function () {
    this.element.removeChild(this.info_overlay),
    this.setFrozen(!1)
  }, ReplayerBase.prototype.error = function (t) {
    if (!JQi.ERROR_REPORT) throw t;
    this.showMessage('<h1>' + t.name + '</h1><p>' + t.message + '</p>')
  }, ReplayerBase.component = {
  }, ReplayerBase.layouts = {
    a_board: {
    },
    one_cols: {
      top: [
      ]
    },
    two_cols: {
      top: [
      ],
      right: [
      ]
    }
  }, ReplayerBase.dynamicLayout = [
    {
      conditions: {
        minWidth: 600
      },
      layout: ReplayerBase.layouts.two_cols,
      className: 'jqi-large'
    },
    {
      conditions: {
        minWidth: 400
      },
      layout: ReplayerBase.layouts.one_cols,
      className: 'jqi-medium'
    },
    {
      layout: ReplayerBase.layouts.a_board,
      className: 'jqi-small'
    }
  ], ReplayerBase.default = {
    layout: ReplayerBase.dynamicLayout
  },
  ReplayerBase.attributes = {
    'data-jqi': function (t) {
      t && ('(' == t[0] ? this.sgf = t : this.sgfFile = t)
    },
    'data-jqi-board': function (value) {
      this.board = eval('({' + value + '})')
    },
    'data-jqi-onrecordload': function (t) {
      this.recordLoaded = new Function(t)
    },
    'data-jqi-onupdate': function (t) {
      this.update = new Function(t)
    },
    'data-jqi-onfrozen': function (t) {
      this.frozen = new Function(t)
    },
    'data-jqi-onunfrozen': function (t) {
      this.unfrozen = new Function(t)
    },
    'data-jqi-layout': function (value) {
      this.layout = eval('({' + value + '})')
    },
    'data-jqi-enablewheel': function (t) {
      'false' == t.toLowerCase() && (this.enableWheel = !1)
    },
    'data-jqi-lockscroll': function (t) {
      'false' == t.toLowerCase() && (this.lockScroll = !1)
    },
    'data-jqi-enablekeys': function (t) {
      'false' == t.toLowerCase() && (this.enableKeys = !1)
    },
    'data-jqi-rememberpath': function (t) {
      'false' == t.toLowerCase() && (this.rememberPath = !1)
    },
    'data-jqi-allowillegal': function (t) {
      'false' != t.toLowerCase() && (this.allowIllegalMoves = !0)
    },
    'data-jqi-move': function (value) {
      var m = parseInt(value);
      isNaN(m) ? this.move = eval('({' + value + '})')  : this.move = m
    },
    'data-jqi-marklastmove': function (t) {
      'false' == t.toLowerCase() && (this.markLastMove = !1)
    },
    'data-jqi-diagram': function (t) {
      t && ('(' == t[0] ? this.sgf = t : this.sgfFile = t, this.move = - 1, this.allowIllegalMoves = !0, this.markLastMove = !1, this.enableKeys = !1, this.enableWheel = !1, this.layout = {
        top: [
        ],
        right: [
        ],
        left: [
        ],
        bottom: [
        ]
      })
    }
  },
  JQi.ReplayerBase = ReplayerBase;
  var replayer_from_tag = function (t) {
    var e,
    i,
    n;
    i = {
    };
    for (var s = 0; s < t.attributes.length; s++) e = t.attributes[s],
    ReplayerBase.attributes[e.name] && ReplayerBase.attributes[e.name].call(i, e.value, e.name);
    n = new ReplayerBase(t, i),
    t._jqi_replayer = n
  };
  window.addEventListener('load', function () {
    for (var t = document.querySelectorAll('[data-jqi],[data-jqi-diagram]'), e = 0; e < t.length; e++) replayer_from_tag(t[e])
  }),
  JQi.i18n.en.closewindow = 'click anywhere to close this window'
}(JQi), function (t, e) {
  'use strict';
  var i = function () {
    this.element = document.createElement('div')
  };
  i.prototype = {
    constructor: i,
    appendTo: function (t) {
      t.appendChild(this.element)
    },
    getWidth: function () {
      var t = window.getComputedStyle(this.element);
      return parseInt(t.width)
    },
    getHeight: function () {
      var t = window.getComputedStyle(this.element);
      return parseInt(t.height)
    },
    updateDimensions: function () {
    }
  },
  t.ReplayerBase.component.Component = i
}(JQi), function (n, t) {
  'use strict';
  var s = n.extendClass(n.ReplayerBase.component.Component, function (t) {
    this.super (t),
    this.widgets = [
    ],
    this.element.className = 'jqi-replayer-control',
    function (t) {
      var e;
      for (var i in this.iconBar = document.createElement('div'), this.iconBar.className = 'jqi-control-wrapper', this.element.appendChild(this.iconBar), s.widgets) (e = new s.widgets[i].constructor(t, s.widgets[i].args)).appendTo(this.iconBar),
      this.widgets.push(e)
    }.call(this, t)
  });
  s.prototype.updateDimensions = function () {
    this.element.className = 'jqi-replayer-control'
  };
  var e = n.ReplayerBase.control = {
  },
  i = function (t) {
    t.node.parent || this.disabled ? t.node.parent && this.disabled && this.enable()  : this.disable()
  },
  o = function (t) {
    t.node.children.length || this.disabled ? t.node.children.length && this.disabled && this.enable()  : this.disable()
  },
  r = function (t) {
    this._disabled = this.disabled,
    this.disabled || this.disable()
  },
  a = function (t) {
    this._disabled || this.enable(),
    delete this._disabled
  };
  e.Widget = function (t, e) {
    this.element = this.element || document.createElement(e.type || 'div'),
    this.element.className = 'jqi-widget-' + e.name,
    this.init(t, e)
  },
  e.Widget.prototype = {
    constructor: e.Widget,
    init: function (t, e) {
      e && (e.disabled && this.disable(), e.init && e.init.call(this, t))
    },
    appendTo: function (t) {
      t.appendChild(this.element)
    },
    disable: function () {
      this.disabled = !0,
      - 1 == this.element.className.search('jqi-disabled') && (this.element.className += ' jqi-disabled')
    },
    enable: function () {
      this.disabled = !1,
      this.element.className = this.element.className.replace(' jqi-disabled', ''),
      this.element.disabled = ''
    }
  },
  e.Group = n.extendClass(e.Widget, function (t, e) {
    for (var i in this.element = document.createElement('div'), this.element.className = 'jqi-ctrlgroup jqi-ctrlgroup-' + e.name, e.widgets) new e.widgets[i].constructor(t, e.widgets[i].args).appendTo(this.element)
  }),
  e.Clickable = n.extendClass(e.Widget, function (t, e) {
    this.super (t, e)
  }),
  e.Clickable.prototype.init = function (t, e) {
    var i,
    n = this;
    i = e.togglable ? function () {
      n.disabled || (e.click.call(n, t) ? n.select()  : n.unselect())
    }
     : function () {
      n.disabled || e.click.call(n, t)
    },
    this.element.addEventListener('click', i),
    this.element.addEventListener('touchstart', function (t) {
      return t.preventDefault(),
      i(),
      e.multiple && (n._touch_i = 0, n._touch_int = window.setInterval(function () {
        500 < n._touch_i && i(),
        n._touch_i += 100
      }, 100)),
      !1
    }),
    e.multiple && this.element.addEventListener('touchend', function (t) {
      window.clearInterval(n._touch_int)
    }),
    e.disabled && this.disable(),
    e.init && e.init.call(this, t)
  },
  e.Button = n.extendClass(e.Clickable, function (t, e) {
    var i = this.element = document.createElement('button');
    i.className = 'jqi-button jqi-button-' + e.name,
    i.title = n.t(e.name),
    this.init(t, e)
  }),
  e.Button.prototype.disable = function () {
    e.Button.prototype.super .prototype.disable.call(this),
    this.element.disabled = 'disabled'
  },
  e.Button.prototype.enable = function () {
    e.Button.prototype.super .prototype.enable.call(this),
    this.element.disabled = ''
  },
  e.MoveNumber = n.extendClass(e.Widget, function (t) {
    this.element = document.createElement('form'),
    this.element.className = 'jqi-replayer-mn-wrapper';
    var e = this.move = document.createElement('input');
    e.type = 'text',
    e.value = '0',
    e.maxlength = 3,
    e.className = 'jqi-replayer-mn-value',
    this.element.appendChild(e),
    this.element.onsubmit = e.onchange = function (t) {
      return t.goTo(this.getValue()),
      !1
    }.bind(this, t),
    t.addEventListener('update', function (t) {
      this.setValue(t.path.m)
    }.bind(this)),
    t.addEventListener('recordLoaded', this.enable.bind(this)),
    t.addEventListener('frozen', this.disable.bind(this)),
    t.addEventListener('unfrozen', this.enable.bind(this))
  }),
  e.MoveNumber.prototype.disable = function () {
    e.MoveNumber.prototype.super .prototype.disable.call(this),
    this.move.disabled = 'disabled'
  },
  e.MoveNumber.prototype.enable = function () {
    e.MoveNumber.prototype.super .prototype.enable.call(this),
    this.move.disabled = ''
  },
  e.MoveNumber.prototype.setValue = function (t) {
    this.move.value = t
  },
  e.MoveNumber.prototype.getValue = function () {
    return parseInt(this.move.value)
  },
  s.widgets = [
    {
      constructor: e.Group,
      args: {
        name: 'control',
        widgets: [
          {
            constructor: e.Button,
            args: {
              name: 'first',
              disabled: !0,
              init: function (t) {
                t.addEventListener('update', i.bind(this)),
                t.addEventListener('frozen', r.bind(this)),
                t.addEventListener('unfrozen', a.bind(this))
              },
              click: function (t) {
                t.first()
              }
            }
          },
          {
            constructor: e.Button,
            args: {
              name: 'multiprev',
              disabled: !0,
              multiple: !0,
              init: function (t) {
                t.addEventListener('update', i.bind(this)),
                t.addEventListener('frozen', r.bind(this)),
                t.addEventListener('unfrozen', a.bind(this))
              },
              click: function (t) {
                var e = n.clone(t.recordReader.path);
                e.m -= 10,
                t.goTo(e)
              }
            }
          },
          {
            constructor: e.Button,
            args: {
              name: 'previous',
              disabled: !0,
              multiple: !0,
              init: function (t) {
                t.addEventListener('update', i.bind(this)),
                t.addEventListener('frozen', r.bind(this)),
                t.addEventListener('unfrozen', a.bind(this))
              },
              click: function (t) {
                t.previous()
              }
            }
          },
          {
            constructor: e.MoveNumber
          },
          {
            constructor: e.Button,
            args: {
              name: 'next',
              disabled: !0,
              multiple: !0,
              init: function (t) {
                t.addEventListener('update', o.bind(this)),
                t.addEventListener('frozen', r.bind(this)),
                t.addEventListener('unfrozen', a.bind(this))
              },
              click: function (t) {
                t.next()
              }
            }
          },
          {
            constructor: e.Button,
            args: {
              name: 'multinext',
              disabled: !0,
              multiple: !0,
              init: function (t) {
                t.addEventListener('update', o.bind(this)),
                t.addEventListener('frozen', r.bind(this)),
                t.addEventListener('unfrozen', a.bind(this))
              },
              click: function (t) {
                var e = n.clone(t.recordReader.path);
                e.m += 10,
                t.goTo(e)
              }
            }
          },
          {
            constructor: e.Button,
            args: {
              name: 'last',
              disabled: !0,
              init: function (t) {
                t.addEventListener('update', o.bind(this)),
                t.addEventListener('frozen', r.bind(this)),
                t.addEventListener('unfrozen', a.bind(this))
              },
              click: function (t) {
                t.last()
              }
            }
          }
        ]
      }
    }
  ];
  var h = n.ReplayerBase.layouts;
  h.two_cols.top.push('Control'),
  h.one_cols.top.push('Control'),
  n.ReplayerBase.component.Control = s;
  var l = {
    first: 'First',
    multiprev: '10 moves back',
    previous: 'Previous',
    next: 'Next',
    multinext: '10 moves forward',
    last: 'Last'
  };
  for (var c in l) n.i18n.en[c] = l[c]
}(JQi), function () {
  'use strict';
  var e = function (t) {
    this[t] = {
    };
    var e = this[t];
    e.box = document.createElement('div'),
    e.box.className = 'jqi-box-wrapper jqi-player-wrapper jqi-' + t,
    e.name = document.createElement('div'),
    e.name.className = 'jqi-player-title',
    e.name.innerHTML = t,
    e.box.appendChild(e.name);
    var i = document.createElement('div');
    i.className = 'jqi-player-caps-wrapper',
    e.box.appendChild(i),
    e.caps = document.createElement('div'),
    e.caps.className = 'jqi-player-caps-' + t,
    i.appendChild(e.caps)
  },
  i = function (t) {
    var e,
    i,
    n;
    if (t.style.fontSize ? (n = parseInt(t.style.fontSize), t.style.fontSize = '', e = window.getComputedStyle(t), i = parseInt(e.fontSize), t.style.fontSize = n + 'px')  : (e = window.getComputedStyle(t), i = n = parseInt(e.fontSize)), !(n == i && t.scrollHeight <= t.offsetHeight)) if (t.scrollHeight > t.offsetHeight) for (n -= 2; t.scrollHeight > t.offsetHeight && 1 < n; ) t.style.fontSize = n + 'px',
    n -= 2;
     else if (n < i) {
      for (n += 2; t.scrollHeight <= t.offsetHeight && n <= i; ) t.style.fontSize = n + 'px',
      n += 2;
      t.scrollHeight > t.offsetHeight && (t.style.fontSize = n - 4 + 'px')
    }
  },
  n = function (t) {
    var e,
    i;
    (e = t.charCodeAt(0) - 'a'.charCodeAt(0)) < 0 && (e += 'a'.charCodeAt(0) - 'A'.charCodeAt(0)),
    7 < e && e--,
    i = t.charCodeAt(1) - '0'.charCodeAt(0),
    2 < t.length && (i = 10 * i + (t.charCodeAt(2) - '0'.charCodeAt(0))),
    i = this.recordReader.game.size - i,
    this._tmp_mark = {
      type: 'MA',
      x: e,
      y: i
    },
    this.board.addObject(this._tmp_mark)
  },
  s = function () {
    this.board.removeObject(this._tmp_mark),
    delete this._tmp_mark
  },
  o = function (t, e) {
    for (var i in t) t[i].className && 'jqi-move-link' == t[i].className ? (t[i].addEventListener('mouseover', n.bind(e, t[i].innerHTML)), t[i].addEventListener('mouseout', s.bind(e)))  : t[i].childNodes && t[i].childNodes.length && o(t[i].childNodes, e)
  },
  r = function (t, e) {
    var i = '<div class="jqi-property-list">';
    for (var n in t) i += '<div class="jqi-property-list-item"><span class="jqi-property-list-item-lable">' + n + '</span><span class="jqi-property-list-item-value">' + t[n] + '</span></div>';
    return i += '</div>'
  },
  t = JQi.extendClass(JQi.ReplayerBase.component.Component, function (t) {
    this.super (t),
    this.replayer = t,
    function () {
      e.call(this, 'black'),
      e.call(this, 'white'),
      this.element.appendChild(this.black.box),
      this.element.appendChild(this.white.box),
      this.property_wrapper = document.createElement('div'),
      this.property_wrapper.className = 'jqi-box-wrapper jqi-property-wrapper',
      this.element.appendChild(this.property_wrapper),
      this.property_content = document.createElement('div'),
      this.property_content.className = 'jqi-property-content',
      this.property_wrapper.appendChild(this.property_content),
      this.property_text = document.createElement('div'),
      this.property_text.className = 'jqi-property-text',
      this.property_content.appendChild(this.property_text)
    }.call(this),
    t.addEventListener('recordLoaded', function (t) {
      var e = t.record.info || {
      };
      e.black ? this.black.name.innerHTML = JQi.filterHTML(e.black.name) || JQi.t('black')  : this.black.name.innerHTML = JQi.t('black'),
      e.white ? this.white.name.innerHTML = JQi.filterHTML(e.white.name) || JQi.t('white')  : this.white.name.innerHTML = JQi.t('white'),
      this.black.caps.innerHTML = '0',
      this.white.caps.innerHTML = '0',
      this.updateDimensions();
      var i = new Array('black', 'white'),
      n = r(t.target.getGameInfo(i));
      this.element.className = 'jqi-gameinfo',
      t.record.hasComments() ? (this._update = function (t) {
        this.setComments(n, t)
      }.bind(this), this.replayer.addEventListener('update', this._update))  : (this._update && (replayer.removeEventListener('update', this._update), delete this._update), this.property_text.innerHTML = n)
    }.bind(this)),
    t.addEventListener('update', function (t) {
      void 0 !== t.position.capCount.black && (this.black.caps.innerHTML = t.position.capCount.black),
      void 0 !== t.position.capCount.white && (this.white.caps.innerHTML = t.position.capCount.white)
    }.bind(this))
  });
  t.prototype.updateDimensions = function () {
    i(this.black.name),
    i(this.white.name);
    var t = this.replayer.dom.center.offsetHeight;
    this.property_wrapper.style.height = t - 80 - 1 + 'px'
  },
  t.prototype.setComments = function (t, e) {
    this.replayer._tmp_mark && s.call(this.replayer);
    var i = this.getCommentText(e.node.comment, this.replayer.config.formatNicks, this.replayer.config.formatMoves);
    this.property_text.innerHTML = t + i,
    this.replayer.config.formatMoves && this.property_text.childNodes && this.property_text.childNodes.length && o(this.property_text.childNodes, this.replayer)
  },
  t.prototype.getCommentText = function (t, e, i) {
    if (t) {
      var n = '<p>' + JQi.filterHTML(t).replace(/\n/g, '</p><p>') + '</p>';
      return e && (n = n.replace(/(<p>)([^:]{3,}:)\s/g, '<p><span class="jqi-comments-nick">$2</span> ')),
      i && (n = n.replace(/\b[a-zA-Z]1?\d\b/g, '<a href="javascript:void(0)" class="jqi-move-link">$&</a>')),
      n
    }
    return ''
  },
  JQi.ReplayerBase.default.formatNicks = !0,
  JQi.ReplayerBase.default.formatMoves = !0,
  JQi.ReplayerBase.attributes['data-jqi-formatnicks'] = function (t) {
    'false' == t.toLowerCase() && (this.formatNicks = !1)
  },
  JQi.ReplayerBase.attributes['data-jqi-formatmoves'] = function (t) {
    'false' == t.toLowerCase() && (this.formatMoves = !1)
  },
  JQi.ReplayerBase.layouts.two_cols.right.push('InfoBox'),
  JQi.ReplayerBase.component.InfoBox = t,
  JQi.i18n.en.caps = 'Caps'
}(JQi),
JQi.lang = 'zh',
JQi.i18n[JQi.lang] = {
  black: '黑方',
  white: '白方',
  DT: '日期',
  KM: '贴子',
  HA: '让子',
  AN: '注释',
  CP: '版权',
  GC: '注释',
  GN: '名称',
  ON: '布局',
  OT: '读秒',
  TM: '时限',
  RE: '结果',
  RO: '轮',
  RU: '规则',
  US: '记录',
  PC: '地点',
  EV: '赛事',
  SO: '来源',
  none: '无',
  minute: '分',
  minutes: '分',
  second: '秒',
  seconds: '秒',
  bpass: '黑方虚着。',
  wpass: '白方虚着。',
  closewindow: '点击任意处关闭窗口',
  caps: '提子',
  first: '最前手',
  multiprev: '前十手',
  previous: '前一手',
  next: '后一手',
  multinext: '后十手',
  last: '最后手',
  moveerror: '着手错误',
  invalidmove: '无效着手。',
  nullmove: '着手对象无属性。',
  outside: '下在棋盘外。',
  notempty: '着点已有子。',
  suicide: '着手为自杀。',
  repetition: '全局同形。',
  fileerror: '文件错误',
  isempty: '为空。',
  readerror: '读取错误。',
  notfound: '没有发现。'
};
